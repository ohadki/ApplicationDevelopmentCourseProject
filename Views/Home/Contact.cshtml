
@model ApplicationDevelopmentCourseProject.Controllers.BranchesController.ContactViewModel


<html>
<head>
    <script src="https://maps.googleapis.com/maps/api/js?"></script>
</head>
<body>
    @*<div class="container">*@
    <div class="account-wall">
        <h1>Contact us !</h1>

        <article class="card-body mx-auto" >
            <form action='@Url.Action("ContactEmail","Contacts")' method='post'>
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div>
                    <div class="form-group input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"> <i class="fa fa-user"></i> </span>
                        </div>
                        <input asp-for="ContactModel.Name" class="form-control" placeholder="Name" type="text" />
                    </div>
                    <!-- form-group// -->
                    <span asp-validation-for="ContactModel.Name" class="text-danger"></span>
                </div>
                <div>
                    <div class="form-group input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"> <i class="fa fa-envelope"></i> </span>
                        </div>
                        <input asp-for="ContactModel.Email" class="form-control" placeholder="Email" type="email" />
                    </div>
                    <!-- form-group// -->
                    <span asp-validation-for="ContactModel.Email" class="text-danger"></span>
                </div>

                <div>
                    <div class="form-group input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"> <i class="fa fa-phone"></i> </span>
                        </div>
                        <input asp-for="ContactModel.Telephone" class="form-control" placeholder="Telephone" type="number">
                    </div>
                    <!-- form-group// -->
                    <span asp-validation-for="ContactModel.Telephone" class="text-danger"></span>
                </div>

                <div>
                    <div class="form-group input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"> <i class="fa fa-envelope"></i> </span>
                        </div>
                        <input asp-for="ContactModel.Message" class="form-control" placeholder="Message" type="text">
                    </div>
                    <!-- form-group// -->
                    <span asp-validation-for="ContactModel.Message" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <input type="submit" value="Send message" class="btn btn-dark btn-block" />
                </div>
                @if (!String.IsNullOrEmpty(ViewBag.Error))
                {
                    <div class="text-danger">@ViewBag.Error</div>
                }
            </form>
        </article>
        <div class="text-center text-white">
            <canvas id="canvas" width="140" height="140" class="text-center"></canvas>
        </div>

    </div>

    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }


    <div class="text-center">
        <h3>Take a quick glace at our branches locations:</h3>
        <div id="ZeroBranches" style="display:none">
            <h4>Currently there is no branches</h4>
        </div>
        <div id="branchesMap" style="width:100%;height:400px;"></div>
    </div>

    <div class="container py-5 h-100">

        <div class="row d-flex justify-content-center align-items-center h-100">
            <div>

                <h3 class="mb-4 pb-2 fw-normal">Check the weather forecast near the branch you are going to go to:</h3>

                <div class="input-group rounded mb-3">
                    <input id="txtCity" type="search" class="form-control rounded" placeholder="City" aria-label="Search"
                           aria-describedby="search-addon" />
                    <button class="btn btn-dark btn-block" onclick="GetWeather()">
                            Check!
                    </button>
                </div>

                <div class="card shadow-0 border">
                    <div class="card-body p-4">
                        
                        <p>Current temperature: <strong><label id="lblTemp"></label></strong></p>
                        <p>Feels like: <strong><label id="lblTempFeelsLike"></label></strong></p>
                        <p class="mb-2">Humidity: <strong><label id="lblHumidity"></label></strong></p>
                        <p>Max: <strong><label id="lblTempMax"></label></strong>, Min: <strong><label id="lblTempMin"></label></strong></p>

                        <div class="d-flex flex-row align-items-center">
                            <p class="mb-0 me-4"><label id="lblDescription">Description:</label></p>
                            <img id="imgWeatherIconUrl" src="https://openweathermap.org/img/w/50d.png" title="Weather Icon" />
                        </div>

                    </div>
                </div>

            </div>
        </div>

    </div>
</body>
</html>

<script type="text/javascript">
        var map;
        var Latitude, Longitude;
    var markersArray = [];
    var branches = @Json.Serialize(Model.Branches);
    function initialize() {


        var myLatlng1 = new google.maps.LatLng(branches[0].xCoordinate, branches[0].yCoordinate);

            var mapOptions = {
                zoom: 15,
                center: myLatlng1,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            map = new google.maps.Map(document.getElementById('branchesMap'),
                mapOptions);

            initialLocation = new google.maps.LatLng(branches[0].xCoordinate, branches[0].yCoordinate);
            map.setCenter(initialLocation);

            var marker = new google.maps.Marker({
                position: myLatlng1,
            });
            marker.setMap(map);
            var marker = new google.maps.Marker({
                position: initialLocation,
                map: map,
                title: "You are here!"
            });

            getLocations();

    };
    function getLocations() {

        for (i = 0; i < branches.length; i++) {
            PlotMarker(branches[i].xCoordinate, branches[i].yCoordinate)
        }
    }
    function PlotMarker(Lat, Long) {
        var marker1 = new google.maps.Marker({
            position: new google.maps.LatLng(Lat, Long),
            map: map,
            draggable: false,
            animation: google.maps.Animation.DROP
        });
        markersArray.push(marker1);
    }
    google.maps.event.addDomListener(window, "load", initialize);

</script>

<script>
    var branches = @Json.Serialize(Model.Branches);
    function checkBranches() {
        var zeroBranches = document.getElementById('ZeroBranches');
        if (branches.length == 0) {
            zeroBranches.style.display = 'block';
        }
        else {
            zeroBranches.style.display = 'none';
        }
    }
</script>
<script>
    window.onload = function () {
        checkBranches();
        setInterval(showClock, 1000);
        showClock();

        function showClock() {

            // DEFINE CANVAS AND ITS CONTEXT.
            var canvas = document.getElementById('canvas');
            var ctx = canvas.getContext('2d');

            var date = new Date;
            var angle;
            var secHandLength = 60;

            // CLEAR EVERYTHING ON THE CANVAS. RE-DRAW NEW ELEMENTS EVERY SECOND.
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            OUTER_DIAL1();
            OUTER_DIAL2();
            CENTER_DIAL();
            MARK_THE_HOURS();
            MARK_THE_SECONDS();

            SHOW_SECONDS();
            SHOW_MINUTES();
            SHOW_HOURS();

            function OUTER_DIAL1() {
                ctx.beginPath();
                ctx.arc(canvas.width / 2, canvas.height / 2, secHandLength + 10, 0, Math.PI * 2);
                ctx.strokeStyle = '#92949C';
                ctx.stroke();
            }
            function OUTER_DIAL2() {
                ctx.beginPath();
                ctx.arc(canvas.width / 2, canvas.height / 2, secHandLength + 7, 0, Math.PI * 2);
                ctx.strokeStyle = '#929BAC';
                ctx.stroke();
            }
            function CENTER_DIAL() {
                ctx.beginPath();
                ctx.arc(canvas.width / 2, canvas.height / 2, 2, 0, Math.PI * 2);
                ctx.lineWidth = 3;
                ctx.fillStyle = '#353535';
                ctx.strokeStyle = '#0C3D4A';
                ctx.stroke();
            }

            function MARK_THE_HOURS() {

                for (var i = 0; i < 12; i++) {
                    angle = (i - 3) * (Math.PI * 2) / 12;       // THE ANGLE TO MARK.
                    ctx.lineWidth = 1;            // HAND WIDTH.
                    ctx.beginPath();

                    var x1 = (canvas.width / 2) + Math.cos(angle) * (secHandLength);
                    var y1 = (canvas.height / 2) + Math.sin(angle) * (secHandLength);
                    var x2 = (canvas.width / 2) + Math.cos(angle) * (secHandLength - (secHandLength / 7));
                    var y2 = (canvas.height / 2) + Math.sin(angle) * (secHandLength - (secHandLength / 7));

                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y2);

                    ctx.strokeStyle = '#466B76';
                    ctx.stroke();
                }
            }

            function MARK_THE_SECONDS() {

                for (var i = 0; i < 60; i++) {
                    angle = (i - 3) * (Math.PI * 2) / 60;       // THE ANGLE TO MARK.
                    ctx.lineWidth = 1;            // HAND WIDTH.
                    ctx.beginPath();

                    var x1 = (canvas.width / 2) + Math.cos(angle) * (secHandLength);
                    var y1 = (canvas.height / 2) + Math.sin(angle) * (secHandLength);
                    var x2 = (canvas.width / 2) + Math.cos(angle) * (secHandLength - (secHandLength / 30));
                    var y2 = (canvas.height / 2) + Math.sin(angle) * (secHandLength - (secHandLength / 30));

                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y2);

                    ctx.strokeStyle = '#C4D1D5';
                    ctx.stroke();
                }
            }

            function SHOW_SECONDS() {

                var sec = date.getSeconds();
                angle = ((Math.PI * 2) * (sec / 60)) - ((Math.PI * 2) / 4);
                ctx.lineWidth = 0.5;              // HAND WIDTH.

                ctx.beginPath();
                // START FROM CENTER OF THE CLOCK.
                ctx.moveTo(canvas.width / 2, canvas.height / 2);
                // DRAW THE LENGTH.
                ctx.lineTo((canvas.width / 2 + Math.cos(angle) * secHandLength),
                    canvas.height / 2 + Math.sin(angle) * secHandLength);

                // DRAW THE TAIL OF THE SECONDS HAND.
                ctx.moveTo(canvas.width / 2, canvas.height / 2);    // START FROM CENTER.
                // DRAW THE LENGTH.
                ctx.lineTo((canvas.width / 2 - Math.cos(angle) * 20),
                    canvas.height / 2 - Math.sin(angle) * 20);

                ctx.strokeStyle = '#586A73';        // COLOR OF THE HAND.
                ctx.stroke();
            }

            function SHOW_MINUTES() {

                var min = date.getMinutes();
                angle = ((Math.PI * 2) * (min / 60)) - ((Math.PI * 2) / 4);
                ctx.lineWidth = 1.5;              // HAND WIDTH.

                ctx.beginPath();
                ctx.moveTo(canvas.width / 2, canvas.height / 2);  // START FROM CENTER.
                // DRAW THE LENGTH.
                ctx.lineTo((canvas.width / 2 + Math.cos(angle) * secHandLength / 1.1),
                    canvas.height / 2 + Math.sin(angle) * secHandLength / 1.1);

                ctx.strokeStyle = '#999';  // COLOR OF THE HAND.
                ctx.stroke();
            }

            function SHOW_HOURS() {

                var hour = date.getHours();
                var min = date.getMinutes();
                angle = ((Math.PI * 2) * ((hour * 5 + (min / 60) * 5) / 60)) - ((Math.PI * 2) / 4);
                ctx.lineWidth = 1.5;              // HAND WIDTH.

                ctx.beginPath();
                ctx.moveTo(canvas.width / 2, canvas.height / 2);     // START FROM CENTER.
                // DRAW THE LENGTH.
                ctx.lineTo((canvas.width / 2 + Math.cos(angle) * secHandLength / 1.5),
                    canvas.height / 2 + Math.sin(angle) * secHandLength / 1.5);

                ctx.strokeStyle = '#000';   // COLOR OF THE HAND.
                ctx.stroke();
            }
        }
    }
</script>

<script>
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    function GetWeather() {
        var cityname = $("#txtCity").val();
        if (cityname.length > 0) {
            $.ajax({
                url: "/Home/WeatherDetail?City=" + cityname,
                type: "POST",
                success: function (rsltval) {
                    var data = JSON.parse(rsltval);
                    console.log(data);
                    $("#lblDescription").text(capitalizeFirstLetter(data.Description)+":");
                    $("#lblHumidity").text(data.Humidity + "%");
                    $("#lblTempFeelsLike").text(data.TempFeelsLike +"°C");
                    $("#lblTemp").text(data.Temp + "°C");
                    $("#lblTempMax").text(data.TempMax + "°C");
                    $("#lblTempMin").text(data.TempMin + "°C");
                    $("#imgWeatherIconUrl").attr("src", "http://openweathermap.org/img/w/" + data.WeatherIcon + ".png");
                    //data - response from server
                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    if (xhr.status === 404) {
                        alert(xhr.responseText);
                    }
                }
            });
        }
        else {
            alert("City name can't be empty");
        }
    }

</script>

