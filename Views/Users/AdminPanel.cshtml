@model ApplicationDevelopmentCourseProject.Controllers.UsersController.AdminViewModel

<style>
    .center {
        text-align: center;
    }
</style>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Admin Panel</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="#users" onclick="showhide('usersTable');">Users <span class="sr-only">(current)</span></a>
            </li>
            <li><a class="nav-link" href="#branches" onclick="showhide('branchestable');">Branches</a></li>
            <li><a class="nav-link" href="#products" onclick="showhide('productsTable');">Products</a></li>
            <li><a class="nav-link" href="#categories" onclick="showhide('categoriesTable');">Categories</a></li>
            <li><a class="nav-link" href="#producttags" onclick="showhide('ProductTagsTable');">Product Tags</a></li>
            <li><a class="nav-link" href="#orders" onclick="showhide('ordersTable');">Orders</a></li>
            @*<li><a class="nav-link" href="#statistics" onclick="showhide('statistics');">Statistics</a></li>*@
            <li><a class="nav-link" href="#contactUs" onclick="showhide('contactUsMessagesTable');">Customer messages</a></li>
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Statistics
                </a>
                <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                    <a class="dropdown-item" href="#monthly_sales_stats" onclick="showhide('monthly_sales_stats');">Monthly sales</a>
                    <a class="dropdown-item" href="#category_stats" onclick="showhide('category_stats');">Sales by category</a>
                </div>
            </li>

        </ul>
        <form class="form-inline my-2 my-lg-0">
            <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" id="searched-input-admin-panel">
            <button class="btn btn-outline-success my-2 my-sm-0" type="button" onclick="SearchItems()">Search</button>
        </form>
    </div>
</nav>

<body>
    <div id="branchestable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.BranchName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.Address)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.XCoordinate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.YCoordinate)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Branches)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.BranchName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Address)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.XCoordinate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.YCoordinate)
                        </td>
                        <td>
                            <a asp-controller="Branches" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-controller="Branches" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-controller="Branches" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("Create", "Branches")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Create new branch" />
    </div>
    <div id="contactUsMessagesTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Telephone)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Message)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Email)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Contacts)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Telephone)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Message)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            <a asp-controller="Contacts" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-controller="Contacts" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div id="categoriesTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.CategoryModel.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CategoryModel.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CategoryModel.Description)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Categories)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            <a asp-controller="Categories" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-controller="Categories" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-controller="Categories" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("Create", "Categories")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Create new category" />
    </div>

    <div id="ProductTagsTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductTagModel.TagName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductTagModel.Id)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.ProductTags)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.TagName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            <a asp-controller="ProductTags" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-controller="ProductTags" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("Create", "ProductTags")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Create new product tag" />
    </div>

    <div id="usersTable">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Email)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Username)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Password)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Type)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.MemberSince)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Users)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Username)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Password)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Type)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MemberSince)
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("Register", "Users")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Register new user" />
    </div>
    <div id="productsTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Price)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Quantity)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Description)
                    </th>

                    @*<th>
            @Html.DisplayNameFor(model => model.ProductModel.Category)
        </th>*@
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Products)
                {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Id)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Quantity)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>

                    @*<td>
            @Html.DisplayFor(modelItem => item.Category)
        </td>*@
                    <td>
                        <a asp-controller="Products" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-controller="Products" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-controller="Products" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("UploadProduct", "Products")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Upload new product" />
    </div>



    <div id="ordersTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.OrderTotal)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.OrderPlaced)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.UserId)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Orders)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderTotal)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderPlaced)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UserId)
                        </td>
                        <td>
                            <a asp-controller="Orders" asp-action="OrderDetails" asp-route-orderId="@item.Id">Details</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div id="statistics" style="display: none;" class="center">
        <!-- Create a div where the graph will take place -->
        <div id="my_dataviz"></div>
    </div>
    <div id="monthly_sales_stats" style="display: none;" class="center">
        <!-- Create a div where the graph will take place -->
        <div id="monthly_sales_stats_inner"></div>
    </div>
    <div id="category_stats" style="display: none;" class="center">
        <!-- Create a div where the graph will take place -->
        <div id="category_stats_inner"></div>
    </div>
</body>

<script>
    function SearchItems() {
        var SearchedPattern = document.getElementById("searched-input-admin-panel").value;

        $.ajax({
            type: "GET",
            url: "/Users/AdminPanel",
            data: { SearchedPattern: SearchedPattern },
            success: function () {
                return true;
            },
            error: function (request, status, error) {
                return false;
            }
        });
    }
</script>



@section Scripts {
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <script type="text/javascript">

        var divState = {}; // we store the status in this object
        function showhide(id) {
            if (document.getElementById) {
                var divid = document.getElementById(id);

                divState[id] = (divState[id]) ? false : true; // initialize / invert status (true is visible and false is closed)
                //close others
                for (var div in divState) {
                    if (divState[div] && div != id) { // ignore closed ones and the current
                        document.getElementById(div).style.display = 'none'; // hide
                        divState[div] = false; // reset status
                    }
                }
                divid.style.display = (divid.style.display == 'block' ? 'none' : 'block');
            }
        }
        showhide("usersTable");
    </script>
    <script>
            d3.json("@Url.Action("CategoriesSalesStats", "Categories")", function (controllerData) {
                // set the dimensions and margins of the graph
            var width = 600
            height = 450
            margin = 40

            // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
            var radius = Math.min(width, height) / 2 - margin

            // append the svg object to the div called 'my_dataviz'
            var svg = d3.select("#category_stats_inner")
                .append("svg")
                .attr("width", width)
                .attr("height", height)
                .append("g")
                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            var categoryDataDict2 = {}
                controllerData.forEach(function (obj) { categoryDataDict2[obj.name] = obj.soldProductsCount; });

            // set the color scale
            var color = d3.scaleOrdinal()
                .domain(categoryDataDict2)
                .range(d3.schemeDark2);

            // Compute the position of each group on the pie:
            var pie = d3.pie()
                .sort(null) // Do not sort group by size
                .value(function (d) { return d.value; })
            var data_ready = pie(d3.entries(categoryDataDict2))

            // The arc generator
            var arc = d3.arc()
                .innerRadius(radius * 0.5)         // This is the size of the donut hole
                .outerRadius(radius * 0.8)

            // Another arc that won't be drawn. Just for labels positioning
            var outerArc = d3.arc()
                .innerRadius(radius * 0.9)
                .outerRadius(radius * 0.9)

            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
            svg
                .selectAll('allSlices')
                .data(data_ready)
                .enter()
                .append('path')
                .attr('d', arc)
                .attr('fill', function (d) { return (color(d.data.key)) })
                .attr("stroke", "white")
                .style("stroke-width", "2px")
                .style("opacity", 0.7)

            // Add the polylines between chart and labels:
            svg
                .selectAll('allPolylines')
                .data(data_ready)
                .enter()
                .append('polyline')
                .attr("stroke", "black")
                .style("fill", "none")
                .attr("stroke-width", 1)
                .attr('points', function (d) {
                    var posA = arc.centroid(d) // line insertion in the slice
                    var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
                    var posC = outerArc.centroid(d); // Label position = almost the same as posB
                    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
                    posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
                    return [posA, posB, posC]
                })

            // Add the polylines between chart and labels:
            svg
                .selectAll('allLabels')
                .data(data_ready)
                .enter()
                .append('text')
                .text(function (d) { console.log(d.data.key); return d.data.key })
                .attr('transform', function (d) {
                    var pos = outerArc.centroid(d);
                    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                    pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
                    return 'translate(' + pos + ')';
                })
                .style('text-anchor', function (d) {
                    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                    return (midangle < Math.PI ? 'start' : 'end')
                })
            })
        </script>
        @*<script>
            d3.json("@Url.Action("MonthlySalesStats","Orders")", function (controllerData) {
                // set the dimensions and margins of the graph
                var width = 450
                height = 450
                margin = 40

                // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
                var radius = Math.min(width, height) / 2 - margin

                // append the svg object to the div called 'my_dataviz'
                var svg = d3.select("#my_dataviz")
                    .append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .append("g")
                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
                //Parse the data that we got from the controller
                var categoryDataDict = {}
                controllerData.forEach(function (obj) { categoryDataDict[obj.month] = obj.sum; });

                // set the color scale
                var color = d3.scaleOrdinal()
                    .domain(categoryDataDict)
                    .range(d3.schemeSet2);

                // Compute the position of each group on the pie:
                var pie = d3.pie()
                    .value(function (d) {
                        console.log(d.value)
                        return d.value;
                    })

                var data_ready = pie(d3.entries(categoryDataDict))
                // Now I know that group A goes from 0 degrees to x degrees and so on.

                // shape helper to build arcs:
                var arcGenerator = d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius)

                // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
                svg
                    .selectAll('mySlices')
                    .data(data_ready)
                    .enter()
                    .append('path')
                    .attr('d', arcGenerator)
                    .attr('fill', function (d) { return (color(d.data.key)) })
                    .attr("stroke", "black")
                    .style("stroke-width", "2px")
                    .style("opacity", 0.7)

                // Now add the annotation. Use the centroid method to get the best coordinates
                svg
                    .selectAll('mySlices')
                    .data(data_ready)
                    .enter()
                    .append('text')
                    .text(function (d) { return d.data.key })
                    .attr("transform", function (d) { return "translate(" + arcGenerator.centroid(d) + ")"; })
                    .style("text-anchor", "middle")
                    .style("font-size", 17)
            })
        </script>*@
    <script>
        // Parse the Data
        //d3.csv("https://raw.githubusercontent.com/ohadki/ApplicationDevelopmentCourseProject/master/sample_stats.csv", function (data) {
        d3.json("@Url.Action("MonthlySalesStats","Orders")", function (data) {
            // set the dimensions and margins of the graph
            var margin = { top: 10, right: 30, bottom: 90, left: 40 },
                width = 600 - margin.left - margin.right,
                height = 450 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            var svg = d3.select("#monthly_sales_stats_inner")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");
            // X axis
            var x = d3.scaleBand()
                .range([0, width])
                .domain(data.map(function (d) { return d.month; }))
                .padding(0.2);
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x))
                .selectAll("text")
                .attr("transform", "translate(-10,0)rotate(-45)")
                .style("text-anchor", "end");

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, 15000])
                .range([height, 0]);
            svg.append("g")
                .call(d3.axisLeft(y));

            // Bars
            svg.selectAll("mybar")
                .data(data)
                .enter()
                .append("rect")
                .attr("x", function (d) { return x(d.month); })
                .attr("width", x.bandwidth())
                .attr("fill", "#69b3a2")
                // no bar at the beginning thus:
                .attr("height", function (d) { return height - y(0); }) // always equal to 0
                .attr("y", function (d) { return y(0); })

            // Animation
            svg.selectAll("rect")
                .transition()
                .duration(800)
                .attr("y", function (d) { return y(d.sum); })
                .attr("height", function (d) { return height - y(d.sum); })
                .delay(function (d, i) {return (i * 100) })

        })
    </script>
}
